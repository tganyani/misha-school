// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int            @id @default(autoincrement())
  firstName        String
  lastName         String
  email            String         @unique
  about            String?
  hLeducation      String?
  country          String?
  image            String?
  imagePublicId    String?
  verificationCode String?
  verified         Boolean        @default(false)
  paymentPlan      PaymentPlan?
  Role             Role           @default(student)
  password         String
  lessonStudent    Lesson[]       @relation("studentLessons")
  lessonTutor      Lesson[]       @relation("tutortLessons")
  meetingStudent   Zoom[]         @relation("studentMeetings")
  meetingTutor     Zoom[]         @relation("tutorMeetings")
  studentComments  Comment[]      @relation("StudentComments")
  tutorComments    Comment[]      @relation("TutorComments")
  subjects         Course[]
  availability     Avaliability[]
  languages        Language[]
  freeTrials       FreeTrial[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

enum Role {
  student
  tutor
  admin
}

model Course {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  image       String?
  rating      Int      @default(5)
  level       Level    @default(primary)
  lessons     Lesson[]
  tutorId     Int
  tutor       User     @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Level {
  primary
  secondary
  university
}

model FeedBack {
  id        Int      @id @default(autoincrement())
  message   String
  userId    Int
  courseId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lesson {
  id        Int      @id @default(autoincrement())
  courseId  Int
  studentId Int
  tutorId   Int?
  startAt   DateTime
  student   User     @relation("studentLessons", fields: [studentId], references: [id], onDelete: Cascade)
  tutor     User?    @relation("tutortLessons", fields: [tutorId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  zoom      Zoom?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Zoom {
  id        Int      @id @default(autoincrement())
  meetingId String   @unique
  topic     String
  type      Int
  duration  Int
  url       String
  lessonId  Int      @unique
  studentId Int
  tutorId   Int?
  startTime DateTime
  student   User     @relation("studentMeetings", fields: [studentId], references: [id], onDelete: Cascade)
  tutor     User?    @relation("tutorMeetings", fields: [tutorId], references: [id])
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Avaliability {
  id     String   @id @default(uuid())
  time   DateTime
  booked Boolean  @default(false)
  userId Int
  user   User     @relation(fields: [userId], references: [id])
}

model Language {
  id     String @id @default(uuid())
  name   String
  level  String
  userId Int
  user   User   @relation(fields: [userId], references: [id])
}

model PaymentPlan {
  id           String          @id @default(uuid())
  type         PaymentPlanType @default(Starter)
  nLessonsLeft Int
  userId       Int             @unique
  user         User            @relation(fields: [userId], references: [id])
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

enum PaymentPlanType {
  Starter
  Standard
  Premium
}

model FreeTrial {
  id        String   @id @default(uuid())
  studEmail String
  tutorId   Int
  tutor     User     @relation(fields: [tutorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  student   User     @relation("StudentComments", fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int
  tutor     User     @relation("TutorComments", fields: [tutorId], references: [id], onDelete: Cascade)
  tutorId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
